import { grammy } from '../deps.ts';
import { isStudent } from '../guards/isStudent.ts';
import { prismaClient } from '../prisma/mod.ts';
import { CallbackTrigger } from '../types/Callbacks.ts';
import { createMenu } from '../utils/createMenu.ts';

export const signingUpForProjectMenu = createMenu()
  .text('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø—Ä–æ–µ–∫—Ç', async (context, next) => {
    try {
      let errorMessage: string | undefined;
      const { user } = context.session;

      if (!user) {
        errorMessage = '‚õîÔ∏è –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ–µ–∫—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.';
      } else if (!isStudent(user)) {
        errorMessage = '‚õîÔ∏è –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø—Ä–æ–µ–∫—Ç.';
      } else if (user.projectId !== null) {
        errorMessage = '‚õîÔ∏è –¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç.';
      }

      if (errorMessage) return context.reply(errorMessage);

      const projects = await prismaClient.project.findMany({
        include: { mentor: true },
        where: { mentor: { isApproved: true } },
      });

      if (!projects.length) {
        return context.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞üòî.');
      }

      await Promise.all(
        projects.map(({ id, name, description, mentor }) =>
          context.reply(
            [
              `–ù–∞–∑–≤–∞–Ω–∏–µ - ${name}`,
              `–û–ø–∏—Å–∞–Ω–∏–µ - ${description}`,
              `–ö—É—Ä–∞—Ç–æ—Ä - ${mentor!.name}`,
            ].join('\n'),
            {
              reply_markup: new grammy.InlineKeyboard().text(
                '–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç',
                `${CallbackTrigger.CHOOSE_PROJECT}?${new URLSearchParams({
                  id: id.toString(),
                })}`,
              ),
            },
          )
        ),
      );
    } finally {
      await next();
    }
  });
