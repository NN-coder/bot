import { grammy, prisma } from '../deps.ts';
import { prismaClient } from '../prisma/mod.ts';
import { CallbackTrigger } from '../types/Callbacks.ts';
import { StudentManagementAction } from '../types/enums.ts';
import { generateCodeWord, getCodeWordList } from '../utils/codeWords.ts';
import { createMenu } from '../utils/createMenu.ts';

const getCallbackTrigger = (id: bigint, action: StudentManagementAction) => {
  const params = new URLSearchParams({
    id: id.toString(),
    action: action.toString(),
  });

  return `${CallbackTrigger.MANAGE_STUDENT}?${params}`;
};

const createKeyboard = (id: bigint) =>
  new grammy.InlineKeyboard()
    .text(
      '+1 ‚≠ê',
      getCallbackTrigger(id, StudentManagementAction.INCREMENT_STARS),
    )
    .text(
      '-1 ‚≠ê',
      getCallbackTrigger(id, StudentManagementAction.DECREMENT_STARS),
    ).row()
    .text(
      '-1 ‚ù§Ô∏è',
      getCallbackTrigger(id, StudentManagementAction.DECREMENT_HEARTS),
    )
    .text(
      '+1 ‚ù§Ô∏è',
      getCallbackTrigger(id, StudentManagementAction.INCREMENT_HEARTS),
    );

export const mentorCabinetMenu = createMenu().text(
  '–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏',
  async (context, next) => {
    const students = await prismaClient.student.findMany({
      include: { project: true },
      where: {
        projectId: (context.session.user as prisma.Mentor).projectId,
        isApproved: false,
      },
    });

    if (!students.length) {
      await context.reply('–ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Çü§∑‚Äç‚ôÇÔ∏è.');
    } else {
      await Promise.all(
        students.map(({ id, name, group }) =>
          context.reply(
            [
              `–ò–º—è - ${name}`,
              `–ì—Ä—É–ø–ø–∞ - ${group}`,
            ].join('\n'),
            {
              reply_markup: new grammy.InlineKeyboard().text(
                '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞',
                `${CallbackTrigger.APPROVE_STUDENT}?${new URLSearchParams({
                  id: id.toString(),
                })}`,
              ),
            },
          )
        ),
      );
    }

    return next();
  },
).text(
  '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
  async (context, next) => {
    const students = await prismaClient.student.findMany({
      where: {
        isApproved: true,
        projectId: (context.session.user as prisma.Mentor).projectId!,
      },
    });

    if (!students.length) {
      await context.reply('–ö —Ç–µ–±–µ –≤ –ø—Ä–æ–µ–∫—Ç –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—èüòî.');
    } else {
      await Promise.all(
        students.map(
          ({ id, name, group, stars, hearts }) =>
            context.reply(
              [`${name}, ${group}\n`, `‚≠ê: ${stars}`, `‚ù§Ô∏è: ${hearts}`].join(
                '\n',
              ),
              { reply_markup: createKeyboard(id) },
            ),
          [],
        ),
      );
    }

    return next();
  },
).row().text('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ', async (context, next) => {
  try {
    const codeWord = await generateCodeWord(
      (context.session.user as prisma.Mentor).projectId!,
    );

    await context.reply(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: ${codeWord}.`);
  } catch {
    await context.reply(
      '‚ùóÔ∏è –í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.',
    );
  }

  return next();
}).text('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞', async (context, next) => {
  const codeWords = getCodeWordList(
    (context.session.user as prisma.Mentor).projectId!,
  );

  if (!codeWords.length) {
    await context.reply('–¢—ã –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.');
  } else {
    await context.reply(
      `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞: ${codeWords.join(', ')}`,
    );
  }

  return next();
});
